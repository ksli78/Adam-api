#
# Docker Compose for Air-Gapped RAG (Production Setup)
#
# This runs both Ollama and the RAG API in containers.
# Use this for production deployment on RHEL9.
#
# Usage:
#   docker-compose -f docker-compose.airgapped.yml up -d
#

version: '3.8'

services:
  #
  # Ollama - Local LLM inference engine
  #
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-service
    ports:
      - "11434:11434"
    volumes:
      # Persistent storage for models
      - ollama_models:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
    restart: unless-stopped
    networks:
      - airgapped-rag-net

    # Uncomment for GPU support on RHEL9 with NVIDIA GPU
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  #
  # Air-Gapped RAG API
  #
  airgapped-rag-api:
    build:
      context: .
      dockerfile: Dockerfile.airgapped
    image: airgapped-rag-api:latest
    container_name: airgapped-rag-api
    ports:
      - "8000:8000"
    volumes:
      # Persistent storage for documents and ChromaDB
      - airgapped_data:/data
    environment:
      - DATA_DIR=/data/airgapped_rag
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_EMBED_MODEL=nomic-embed-text
      - OLLAMA_LLM_MODEL=llama3:8b
      - HOST=0.0.0.0
      - PORT=8000
    depends_on:
      ollama:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - airgapped-rag-net

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  ollama_models:
    name: airgapped_ollama_models
  airgapped_data:
    name: airgapped_rag_data

networks:
  airgapped-rag-net:
    name: airgapped-rag-network
    driver: bridge
